cbuffer Constants
{
    float4 TimeAndResolution; // x = Time, y = Resolution.x, z = Resolution.y, w = unused
};

struct PSInput
{
    float4 Pos : SV_POSITION;
    float2 UV : TEXCOORD;
};

float4 main(PSInput input) : SV_TARGET
{
    float time = TimeAndResolution.x;
    float2 resolution = float2(TimeAndResolution.y, TimeAndResolution.z);

    // Convertimos de [0,1] a [-aspect, aspect] para mantener proporción
    float2 uv = (input.UV * 2.0 - 1.0) * float2(resolution.x / resolution.y, 1.0);

    // Parámetros del fractal
    float2 c = uv * 1.5;
    float2 z = c;

    // Movimiento suave con el tiempo
    c.x += 0.3 * sin(time * 0.5);
    c.y += 0.3 * cos(time * 0.5);

    int maxIter = 100;
    int i;
    for (i = 0; i < maxIter; ++i)
    {
        float x = z.x * z.x - z.y * z.y + c.x;
        float y = 2.0 * z.x * z.y + c.y;

        if (x * x + y * y > 4.0)
            break;

        z = float2(x, y);
    }

    float t = i / (float) maxIter;
    return float4(t, t * 0.6, t * 0.3 + 0.1, 1.0); // Colores simples
}
